{
    "database": [
        {
            "id": "switch",
            "onboot": true,
            "apply": "#!\/system\/bin\/sh\nsetenforce $1",
            "title": "SELinux",
            "arguments": "1",
            "description": "Security-Enhanced Linux is a Linux kernel security module that provides a mechanism for supporting access control security policies.",
            "enable": "#\/system\/bin\/sh\nif [ `getenforce` == \"Enforcing\" ]; then\necho 1\nelse\necho 0\nfi",
            "uniqueId": 7646
        },
        {
            "id": "seekbar",
            "min": "0",
            "progress": "#!\/system\/bin\/sh\n\ncat \/sys\/kernel\/fast_charge\/force_fast_charge",
            "onboot": true,
            "apply": "#!\/system\/bin\/sh\n\nprogress=$1\n\necho $progress > \/sys\/kernel\/fast_charge\/force_fast_charge",
            "title": "Force Fast Charge mode",
            "max": "2",
            "arguments": "2",
            "description": "Disabled\nForce AC\nCustom mA",
            "uniqueId": 6964
        },
        {
            "id": "generic",
            "onboot": true,
            "apply": "#!\/system\/bin\/sh\n\nvalue=$1\n\necho $value > \/sys\/kernel\/fast_charge\/fast_charge_level",
            "title": "Fast Charge custom current limit",
            "arguments": "1200",
            "description": "Limit max charge current mA\nWorks if Force Fast Charge in custom mode\n[500 900 1200 1500 1800 2000]",
            "value": "#!\/system\/bin\/sh\n\ncat \/sys\/kernel\/fast_charge\/fast_charge_level",
            "uniqueId": 285
        },
        {
            "id": "switch",
            "onboot": true,
            "apply": "#!\/system\/bin\/sh\n\nstatus=$1\n\necho $status > \/sys\/module\/msm_thermal\/parameters\/enable_main",
            "title": "Temperature Throttle",
            "arguments": "1",
            "description": "SoC temperature limit toggle.",
            "enable": "#!\/system\/bin\/sh\n\nif [ $(cat \/sys\/module\/msm_thermal\/parameters\/enable_main) = Y ]\nthen\n  echo 1\nelse \n  echo 0\nfi",
            "uniqueId": 7827
        },
        {
            "progress": "#!\/system\/bin\/sh\n\na=$(cat \/sys\/module\/msm_thermal\/parameters\/temp_threshold); let \"a=a-20\"\n\necho $a",
            "min": "20",
            "id": "seekbar",
            "onboot": true,
            "apply": "#!\/system\/bin\/sh\n\na=$1; let \"a=a+20\"\n\necho $a > \/sys\/module\/msm_thermal\/parameters\/temp_threshold",
            "title": "Temperature Limit",
            "arguments": "67",
            "max": "110",
            "description": "If the temperature goes above, the thermal will throttle the CPU frequency to lower the temperature.",
            "uniqueId": 2354
        },
        {
            "id": "switch",
            "onboot": true,
            "apply": "#!\/system\/bin\/sh\n\nchmod \"644\" \/sys\/module\/msm_thermal\/parameters\/enable_extreme\n\nif [ $1 -eq 0 ]\nthen\n  echo 1 > \/sys\/module\/msm_thermal\/parameters\/enable_extreme\nelse\n  echo 0 > \/sys\/module\/msm_thermal\/parameters\/enable_extreme\nfi\n\nchmod \"444\" \/sys\/module\/msm_thermal\/parameters\/enable_extreme",
            "title": "Thermal Shutdown",
            "arguments": "1",
            "description": "Critical shutdown by SoC temperature threshold.",
            "enable": "#!\/system\/bin\/sh\n\nif [ $(cat \/sys\/module\/msm_thermal\/parameters\/enable_extreme) = Y ]\nthen\n  echo 0\nelse \n  echo 1\nfi",
            "uniqueId": 4524
        },
        {
            "progress": "#!\/system\/bin\/sh\n\na=$(cat \/sys\/module\/msm_thermal\/parameters\/temp_threshold_crit); let \"a=a-95\"\n\necho $a",
            "min": "95",
            "id": "seekbar",
            "onboot": true,
            "apply": "#!\/system\/bin\/sh\n\na=$1; let \"a=a+95\"\n\nchmod \"644\" \/sys\/module\/msm_thermal\/parameters\/temp_threshold_crit\n\necho $a > \/sys\/module\/msm_thermal\/parameters\/temp_threshold_crit\n\nchmod \"444\" \/sys\/module\/msm_thermal\/parameters\/temp_threshold_crit",
            "title": "Critical Temperature Threshold",
            "arguments": "10",
            "max": "125",
            "description": "If the temperature goes above, the thermal will synchronize filesystem and power off. This threshold needs to avoid permanent hardware damage if throttling disabled or it works ineffective by any case.",
            "uniqueId": 3075
        },
        {
            "id": "seekbar",
            "min": "0",
            "progress": "#!\/system\/bin\/sh\n\ncat \/sys\/module\/msm_thermal\/parameters\/polling_freq_preset",
            "apply": "#!\/system\/bin\/sh\n\necho $1 > \/sys\/module\/msm_thermal\/parameters\/polling_freq_preset",
            "title": "Thermal Driver Polling Frequency",
            "arguments": "5",
            "max": "7",
            "description": "High values provides more stable thermals while throttling. Low values have lower CPU impact. This value is used only if current SOC temperature up to 15Â°C below throttling threshold temp. On low temp used: 4CpS.\n[0   4   5   8   10   20   25   40]\nCycles per Second (CpS).\nSelect 0 to choose default polling frequency.",
            "uniqueId": 1204
        },
        {
            "id": "seekbar",
            "min": "1",
            "progress": "#!\/system\/bin\/sh\n\na=$(cat \/sys\/class\/backlight\/lm3630\/device\/lm3630_min_level)\nb=$(expr substr \"${a}\" 30 3); let \"b=b-1\"\n\necho $b",
            "onboot": true,
            "apply": "#!\/system\/bin\/sh\n\na=$1; let \"a=a+1\"\n\necho $a > \/sys\/class\/backlight\/lm3630\/device\/lm3630_min_level",
            "title": "LCD Backlight Min Level",
            "arguments": "2",
            "max": "30",
            "description": "The minimum available brightness value controlled by lm3630.",
            "uniqueId": 935
        },
        {
            "progress": "#!\/system\/bin\/sh\n\na=$(cat \/sys\/class\/backlight\/lm3630\/device\/lm3630_max_level)\nb=$(expr substr \"${a}\" 30 3); let \"b=b-127\"\n\necho $b",
            "min": "127",
            "id": "seekbar",
            "onboot": true,
            "apply": "#!\/system\/bin\/sh\n\na=$1; let \"a=a+127\"\n\necho $a > \/sys\/class\/backlight\/lm3630\/device\/lm3630_max_level",
            "title": "LCD Backlight Max Level",
            "arguments": "128",
            "max": "255",
            "description": "The maximum available brightness value controlled by lm3630.",
            "uniqueId": 1011
        },
        {
            "progress": "#!\/system\/bin\/sh\n\na=$(cat \/sys\/class\/backlight\/lm3630\/device\/lm3630_level)\nb=$(expr substr \"${a}\" 26 3); let \"b=b-1\"\n\necho $b",
            "min": "1",
            "id": "seekbar",
            "apply": "#!\/system\/bin\/sh\n\na=$1; let \"a=a+1\"\n\necho $a > \/sys\/class\/backlight\/lm3630\/device\/lm3630_level",
            "title": "LCD Backlight Current Level",
            "max": "255",
            "arguments": "44",
            "description": "Actual brightness value controlled by lm3630.",
            "uniqueId": 8815
        },
        {
            "id": "seekbar",
            "min": "0",
            "progress": "#!\/system\/bin\/sh\n\na=$(cat \/proc\/sys\/kernel\/printk)\nb=$(expr substr \"${a}\" 1 1)\necho $b",
            "apply": "#!\/system\/bin\/sh\n\nprogress=$1\n\necho $progress > \/proc\/sys\/kernel\/printk",
            "title": "Kernel Log Level",
            "arguments": "8",
            "max": "8",
            "description": "Changing the default console log level.",
            "uniqueId": 1133
        },
        {
            "id": "switch",
            "onboot": true,
            "apply": "#!\/system\/bin\/sh\n\nstatus=$1\n\necho $status > \/sys\/class\/leds\/led:flash_torch\/is_torch",
            "title": "Torch 2-Step Logic",
            "arguments": "1",
            "description": "Apply custom 2-step logic for torch LED. That allows to change 2 levels of brightness on kernel level. Compatible with CM torch apps (that have High Brightness mode).",
            "enable": "#!\/system\/bin\/sh\n\necho $(cat \/sys\/class\/leds\/led:flash_torch\/is_torch)",
            "uniqueId": 3787
        },
        {
            "id": "seekbar",
            "min": "1",
            "progress": "#!\/system\/bin\/sh\n\nif [ $(cat \/sys\/class\/leds\/led:flash_torch\/low_brightness) -eq 0 ]; then\n  echo 0\n  exit\nfi\n\na=$(cat \/sys\/class\/leds\/led:flash_torch\/low_brightness); let \"a = (a - 2) \/ 13 + 1)\"\n\necho $a",
            "onboot": true,
            "apply": "#!\/system\/bin\/sh\n\na=$1; let \"a = a * 13 + 1\"\n\necho $a > \/sys\/class\/leds\/led:flash_torch\/low_brightness",
            "title": "LED Default Brightness",
            "arguments": "1",
            "max": "20",
            "description": "Changes torch default brightness value. Stock: 8. This value can not be higher than High Brightness mode value.",
            "uniqueId": 5079
        },
        {
            "progress": "#!\/system\/bin\/sh\n\nif [ $(cat \/sys\/class\/leds\/led:flash_torch\/max_brightness) -eq 0 ]; then\n  echo 0\n  exit\nfi\n\na=$(cat \/sys\/class\/leds\/led:flash_torch\/max_brightness); let \"a = (a - 2) \/ 13 + 1)\"\n\necho $a",
            "min": "1",
            "id": "seekbar",
            "onboot": true,
            "apply": "#!\/system\/bin\/sh\n\na=$1; let \"a = a * 13 + 1\"\n\necho $a > \/sys\/class\/leds\/led:flash_torch\/max_brightness",
            "title": "LED High Brightness Mode",
            "arguments": "15",
            "max": "20",
            "description": "Changes torch max brightness value. Stock: 12. Using torch at high values for long time may cause LED overheat.",
            "uniqueId": 4818
        },
        {
            "enable": "#!\/system\/bin\/sh\n\nif [ $(cat \/sys\/module\/max17048_battery\/parameters\/battery_shutdown) = Y ]\nthen\n  echo 1\nelse \n  echo 0\nfi",
            "id": "switch",
            "apply": "#!\/system\/bin\/sh\n\nstatus=$1\n\necho $status > \/sys\/module\/max17048_battery\/parameters\/battery_shutdown",
            "onboot": true,
            "title": "Battery Shutdown",
            "arguments": "0",
            "description": "Disabling this will remove shutdown by critical low battery level trigger for android system. System will power off by kernel at 3.0V to prevent hardware and filesystem damage. But there is a risk of data loss."
        },
        {
            "id": "switch",
            "enable": "#!\/system\/bin\/sh\n\nif [ $(cat \/sys\/module\/max17048_battery\/parameters\/force_default_temp) = N ]\nthen\n  echo 0\nelse \n  echo 1\nfi",
            "apply": "#!\/system\/bin\/sh\n\necho $1 > \/sys\/module\/max17048_battery\/parameters\/force_default_temp",
            "title": "Force Good Battery Temp",
            "arguments": "1",
            "description": "Spoofing of battery temperature. This is useful if your battery temp reads wrong, in example: swapped battery, damaged cable or used 2-wire connection. In this case controller reads -30Â°C and can not charge battery because of Cold state. Wait a minute to apply value.",
            "uniqueId": 2202
        },
        {
            "id": "generic",
            "apply": "#!\/system\/bin\/sh\n\na=$1; let \"a = (a \/ 16 + ((a % 16) > 0)) * 16\"\n\nif [ $a -lt 3504 ]; then\n  echo 3504 > \/sys\/class\/misc\/max17048_tweaks\/max_voltage_mv\n  exit\nfi\n\nif [ $a -gt 4400 ]; then\n  echo 4400 > \/sys\/class\/misc\/max17048_tweaks\/max_voltage_mv\n  exit\nfi\n\necho $a > \/sys\/class\/misc\/max17048_tweaks\/max_voltage_mv",
            "onboot": true,
            "title": "Battery Max Designed Voltage",
            "arguments": "4300",
            "description": "This value should depend on max designed voltage of installed battery. Bad value may cause degradation, fire and explosion of the battery. So set voltage properly.\nReplug you charger after changing this.\n[Li-ion: 4200mV. Li-poly: 4350-4400mV].\n[Nexus 5 BL-T9: 4350mV].",
            "value": "#!\/system\/bin\/sh\n\ncat \/sys\/class\/misc\/max17048_tweaks\/max_voltage_mv",
            "uniqueId": 9777
        },
        {
            "id": "generic",
            "apply": "#!\/system\/bin\/sh\n\necho $1 > \/sys\/class\/misc\/max17048_tweaks\/fcc_mah",
            "onboot": true,
            "title": "Battery Designed Capacity",
            "arguments": "1700",
            "description": "Set full charge battery capacity mah. Changing this value will not affect on real capacity.",
            "value": "#!\/system\/bin\/sh\n\ncat \/sys\/class\/misc\/max17048_tweaks\/fcc_mah",
            "uniqueId": 9149
        },
        {
            "progress": "#!\/system\/bin\/sh\n\ncat \/sys\/class\/misc\/max17048_tweaks\/bat_current_avg",
            "min": "0",
            "id": "seekbar",
            "onboot": false,
            "apply": "#!\/system\/bin\/sh\n\necho $1 > \/sys\/class\/misc\/max17048_tweaks\/bat_current_avg",
            "title": "Battery Avg Current Gauge Coefficient",
            "arguments": "0",
            "max": "50",
            "description": "This control is not so important. Value make impact on display label (read) of this sysfs control that provides info about actual battery current uA. Use external app like Cool Tool to see this info.\nKernel Adiutor only writes a data.\nHigh values will smooth output data. Set 0 to get raw data."
        },
        {
            "id": "seekbar",
            "min": "0",
            "progress": "#!\/system\/bin\/sh\n\ncat \/sys\/class\/misc\/max17048_tweaks\/bat_power_avg",
            "apply": "#!\/system\/bin\/sh\n\necho $1 > \/sys\/class\/misc\/max17048_tweaks\/bat_power_avg",
            "onboot": true,
            "title": "Battery Avg Power Gauge Coefficient",
            "arguments": "5",
            "max": "50",
            "description": "Another sysfs display label control. Changes avg coefficient of actual battery power uW. Use external app like Cool Tool to see this info.\nKernel Adiutor only writes a data.\nHigh values will smooth output data. Set 0 to get raw data.",
            "uniqueId": 9286
        },
        {
            "id": "switch",
            "onboot": true,
            "apply": "#!\/system\/bin\/sh\n\necho $1 > \/sys\/module\/max17048_battery\/parameters\/low_batt_disable_dyn_fsync",
            "title": "Disable Dynamic Fsync If Low Battery",
            "arguments": "1",
            "description": "When battery level less than 5% fsync operations is synchronous. Disabling this may cause data loss in case of system crash by too low battery voltage. If disabled critical level battery shutdown or cpu at max load with max display brightness battery voltage can drop below normal values. ",
            "enable": "#!\/system\/bin\/sh\n\nif [ $(cat \/sys\/module\/max17048_battery\/parameters\/low_batt_disable_dyn_fsync) = Y ]\nthen\n  echo 1\nelse \n  echo 0\nfi",
            "uniqueId": 3362
        },
        {
            "id": "generic",
            "onboot": false,
            "apply": "#!\/system\/bin\/sh\n\necho $1 > \/sys\/module\/cpu_boost\/parameters\/sync_threshold_min",
            "title": "CPU Boost: Min Sync Threshold",
            "arguments": "0",
            "description": "Minimal source CPU frequency to be boosted destination cpu. If frequency lower than this value destination cpu will not boost.\nValue in KHz. Set 0 to disable.",
            "value": "#!\/system\/bin\/sh\n\ncat \/sys\/module\/cpu_boost\/parameters\/sync_threshold_min",
            "uniqueId": 6209
        },
        {
            "enable": "#!\/system\/bin\/sh\n\nif [ $(cat \/sys\/module\/cpu_boost\/parameters\/load_based_syncs ) = Y ]\nthen\n  echo 1\nelse \n  echo 0\nfi",
            "id": "switch",
            "apply": "#!\/system\/bin\/sh\n\necho $1 > \/sys\/module\/cpu_boost\/parameters\/load_based_syncs",
            "title": "CPU Boost: Load Based Syncs",
            "arguments": "1",
            "description": "Determine whether the module should react to all task migration events or only to those which maintain task load at least that specified by \"Migration Load Threshold\".\nThis switch also changes the way CPU frequencies are going to be changed: when it is disabled, frequencies of source and destination cpus are simply synchronized to a source's one; in case this is enabled, the frequency is changed to either the load fraction of current policy maximum or source's frequency, choosing the biggest of two.",
            "uniqueId": 7888
        },
        {
            "progress": "#!\/system\/bin\/sh\n\ncat \/sys\/module\/cpu_boost\/parameters\/migration_load_threshold",
            "min": "0",
            "id": "seekbar",
            "apply": "#!\/system\/bin\/sh\n\necho $1 > \/sys\/module\/cpu_boost\/parameters\/migration_load_threshold",
            "title": "CPU Boost: Migration Load Threshold",
            "max": "100",
            "arguments": "30",
            "description": "Minimum task load (in precentage) that is considered as noticeable. If a task load is less than this value, frequency synchronization will not occur.\nNote that this threshold is used only if \"Load Based Syncs\" is enabled.",
            "uniqueId": 5057
        }
    ],
    "version": 1
}